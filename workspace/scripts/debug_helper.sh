#!/bin/bash
# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    debug_helper                                       :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: sdestann <sdestann@student.42perpignan.    +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2025/10/13 14:07:12 by sdestann          #+#    #+#              #
#    Updated: 2025/10/14 20:08:19 by sdestann         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

set -e

COLOR_RED='\033[0;31m'
COLOR_GREEN='\033[0;32m'
COLOR_YELLOW='\033[0;33m'
COLOR_BLUE='\033[0;34m'
COLOR_RESET='\033[0m'

echo -e "${COLOR_BLUE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${COLOR_RESET}"
echo -e "${COLOR_BLUE}     Famine Debug Helper${COLOR_RESET}"
echo -e "${COLOR_BLUE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${COLOR_RESET}"
echo ""

# Fonction pour afficher une section
section() {
    echo -e "${COLOR_YELLOW}‚ñ∂ $1${COLOR_RESET}"
}

# Fonction pour afficher un succ√®s
success() {
    echo -e "  ${COLOR_GREEN}‚úì${COLOR_RESET} $1"
}

# Fonction pour afficher une erreur
error() {
    echo -e "  ${COLOR_RED}‚úó${COLOR_RESET} $1"
}

# Fonction pour afficher une info
info() {
    echo -e "  ${COLOR_BLUE}‚Ñπ${COLOR_RESET} $1"
}

# V√©rifier si Famine existe
section "1. V√©rification du binaire Famine"
if [ -f "./Famine" ]; then
    success "Famine trouv√©"
    info "Taille: $(ls -lh ./Famine | awk '{print $5}')"
    info "Type: $(file ./Famine | cut -d: -f2)"
else
    error "strace non disponible"
fi

echo ""

# V√©rifier les infections
section "6. V√©rification des infections"
echo ""
infected_count=0
total_count=0

for dir in /tmp/test /tmp/test2; do
    if [ -d "$dir" ]; then
        for file in "$dir"/*; do
            if [ -f "$file" ] && [ -x "$file" ]; then
                total_count=$((total_count + 1))
                if strings "$file" 2>/dev/null | grep -qi "famine"; then
                    infected_count=$((infected_count + 1))
                    success "$(basename $file) - INFECT√â"
                else
                    info "$(basename $file) - Non infect√©"
                fi
            fi
        done
    fi
done

echo ""
info "R√©sum√©: $infected_count/$total_count binaires infect√©s"

echo ""

# Analyse hexad√©cimale
section "7. Analyse hexad√©cimale d'un binaire infect√©"
sample_file=""
for dir in /tmp/test /tmp/test2; do
    if [ -d "$dir" ]; then
        for file in "$dir"/*; do
            if [ -f "$file" ] && strings "$file" 2>/dev/null | grep -qi "famine"; then
                sample_file="$file"
                break 2
            fi
        done
    fi
done

if [ -n "$sample_file" ]; then
    info "Fichier analys√©: $(basename $sample_file)"
    echo ""
    echo "  Recherche de la signature:"
    hexdump -C "$sample_file" | grep -A2 -B2 "Famine" | head -10 || echo "  Signature non trouv√©e en hex"
else
    error "Aucun binaire infect√© trouv√© pour l'analyse"
fi

echo ""

# Proposer des actions
section "8. Actions disponibles"
echo ""
echo "  Commandes utiles:"
echo ""
echo "  ‚Ä¢ Recompiler:        make re"
echo "  ‚Ä¢ Debug avec GDB:    make gdb"
echo "  ‚Ä¢ Nettoyer tests:    make clean-test"
echo "  ‚Ä¢ Pr√©parer tests:    make test"
echo "  ‚Ä¢ D√©sassembler:      objdump -d -M intel ./Famine | less"
echo "  ‚Ä¢ Voir sections:     readelf -S ./Famine"
echo "  ‚Ä¢ Voir segments:     readelf -l ./Famine"
echo "  ‚Ä¢ Tracer syscalls:   strace ./Famine"
echo ""

# GDB script helper
section "9. Helper GDB"
info "Cr√©er un script GDB automatique..."

cat > /tmp/famine_gdb.cmd << 'EOF'
# Script GDB pour d√©bugger Famine

# Configuration
set disassembly-flavor intel
set pagination off

# Breakpoints utiles
break _start
break process_directory
break process_file
break check_elf64
break infect_binary

# Commandes personnalis√©es
define show_regs
    info registers rax rbx rcx rdx rsi rdi
end

define show_stack
    x/16gx $rsp
end

define show_elf_header
    x/16gx $rdi
end

# Messages
echo \n
echo ========================================\n
echo   Famine Debug Session\n
echo ========================================\n
echo \n
echo Breakpoints d√©finis:\n
echo   ‚Ä¢ _start\n
echo   ‚Ä¢ process_directory\n
echo   ‚Ä¢ process_file\n
echo   ‚Ä¢ check_elf64\n
echo   ‚Ä¢ infect_binary\n
echo \n
echo Commandes utiles:\n
echo   ‚Ä¢ show_regs  : Afficher les registres\n
echo   ‚Ä¢ show_stack : Afficher la stack\n
echo   ‚Ä¢ show_elf_header : Afficher l'en-t√™te ELF\n
echo \n
echo Lancez 'run' pour d√©marrer\n
echo \n
EOF

success "Script GDB cr√©√©: /tmp/famine_gdb.cmd"
info "Usage: gdb -x /tmp/famine_gdb.cmd ./Famine"

echo ""

# Tests recommand√©s
section "10. Tests recommand√©s"
echo ""
echo "  Test 1: Infection simple"
echo "    $ make clean-test && make test"
echo "    $ ./Famine"
echo "    $ strings /tmp/test/sample | grep Famine"
echo ""
echo "  Test 2: Double infection"
echo "    $ ./Famine"
echo "    $ ./Famine  # Ne doit PAS r√©infecter"
echo ""
echo "  Test 3: Comportement pr√©serv√©"
echo "    $ /tmp/test/sample  # Doit afficher 'Hello, World!'"
echo ""
echo "  Test 4: Avec strace"
echo "    $ strace -e trace=open,getdents64,mmap ./Famine"
echo ""
echo "  Test 5: Binaires syst√®me"
echo "    $ cp /bin/ls /tmp/test/"
echo "    $ ./Famine"
echo "    $ /tmp/test/ls -la"
echo ""

# Checklist de debug
section "11. Checklist de debug"
echo ""
checks=(
    "Les r√©pertoires /tmp/test et /tmp/test2 existent"
    "Des binaires ELF64 sont pr√©sents dans ces r√©pertoires"
    "Famine compile sans erreur"
    "Famine s'ex√©cute sans segfault"
    "Les binaires sont bien marqu√©s comme infect√©s"
    "Les binaires infect√©s s'ex√©cutent correctement"
    "Une double infection ne modifie pas le binaire"
    "Aucune sortie sur stdout/stderr"
)

for check in "${checks[@]}"; do
    echo "  ‚òê $check"
done

echo ""
echo -e "${COLOR_BLUE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${COLOR_RESET}"
echo -e "${COLOR_GREEN}Debug helper termin√© !${COLOR_RESET}"
echo -e "${COLOR_BLUE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${COLOR_RESET}"
echo "" "Famine non trouv√©. Compilez d'abord avec 'make'"
    exit 1
fi

echo ""

# V√©rifier les r√©pertoires de test
section "2. V√©rification de l'environnement"
for dir in /tmp/test /tmp/test2; do
    if [ -d "$dir" ]; then
        success "$dir existe"
        info "Contenu: $(ls $dir 2>/dev/null | wc -l) fichier(s)"
    else
        error "$dir n'existe pas"
        info "Cr√©ez-le avec: mkdir -p $dir"
    fi
done

echo ""

# Analyser les binaires de test
section "3. Analyse des binaires de test"
for dir in /tmp/test /tmp/test2; do
    if [ -d "$dir" ]; then
        echo -e "  üìÅ $dir:"
        for file in "$dir"/*; do
            if [ -f "$file" ] && [ -x "$file" ]; then
                echo -e "    ‚Ä¢ $(basename $file)"
                
                # V√©rifier si c'est un ELF
                if file "$file" | grep -q "ELF 64-bit"; then
                    info "    ‚Üí ELF 64-bit ‚úì"
                elif file "$file" | grep -q "ELF 32-bit"; then
                    info "    ‚Üí ELF 32-bit (non support√© actuellement)"
                else
                    error "    ‚Üí Pas un ELF"
                fi
                
                # V√©rifier si d√©j√† infect√©
                if strings "$file" 2>/dev/null | grep -qi "famine"; then
                    success "    ‚Üí D√©j√† infect√©"
                else
                    info "    ‚Üí Non infect√©"
                fi
                
                # Tester l'ex√©cution
                if timeout 1 "$file" >/dev/null 2>&1; then
                    success "    ‚Üí Ex√©cutable"
                else
                    error "    ‚Üí Probl√®me d'ex√©cution"
                fi
            fi
        done
    fi
done

echo ""

# V√©rifier les symboles de Famine
section "4. Symboles et sections de Famine"
info "Sections:"
readelf -S ./Famine | grep -E "\[.*\]" | head -10

echo ""
info "Symboles principaux:"
nm ./Famine 2>/dev/null | grep -E "(start|process|infect|check)" | head -10

echo ""

# Tester les appels syst√®me
section "5. Test d'ex√©cution avec strace (aper√ßu)"
info "Lancement de Famine avec strace..."
if command -v strace >/dev/null 2>&1; then
    strace -c -o /tmp/famine_strace.log ./Famine 2>/dev/null || true
    if [ -f /tmp/famine_strace.log ]; then
        echo ""
        info "R√©sum√© des syscalls:"
        cat /tmp/famine_strace.log | head -20
        rm -f /tmp/famine_strace.log
    fi
else
    error